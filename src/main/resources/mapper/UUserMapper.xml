<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.webMusic.common.dao.UUserMapper" >
  <resultMap id="BaseResultMap" type="com.webMusic.common.model.UUser" >
    <id column="id" property="id" jdbcType="BIGINT" />
    <result column="nickname" property="nickname" jdbcType="VARCHAR" />
    <result column="email" property="email" jdbcType="VARCHAR" />
    <result column="pswd" property="pswd" jdbcType="VARCHAR" />
    <result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
    <result column="last_login_time" property="lastLoginTime" jdbcType="TIMESTAMP" />
    <result column="status" property="status" jdbcType="BIGINT" />
    <result column="head_pic_url" property="headPicUrl" jdbcType="VARCHAR" />
    <result column="personal_intro" property="personalIntro" jdbcType="VARCHAR" />
  </resultMap>
  
  <resultMap id="BaseResultMapTwo" type="com.webMusic.common.model.UUser">
  		<association property="fromUser" javaType="com.webMusic.common.model.UUser">
 			<id column="id" property="id" jdbcType="BIGINT" />
		    <result column="nickname" property="nickname" jdbcType="VARCHAR" />
		    <result column="email" property="email" jdbcType="VARCHAR" />
		    <result column="pswd" property="pswd" jdbcType="VARCHAR" />
		    <result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
		    <result column="last_login_time" property="lastLoginTime" jdbcType="TIMESTAMP" />
		    <result column="status" property="status" jdbcType="BIGINT" />
            <result column="head_pic_url" property="headPicUrl" jdbcType="VARCHAR" />
  		</association>
  		 <association property="toUser" javaType="com.webMusic.common.model.UUser">
 			<id column="idTwo" property="id" jdbcType="BIGINT" />
		    <result column="nicknameTwo" property="nickname" jdbcType="VARCHAR" />
		    <result column="emailTwo" property="email" jdbcType="VARCHAR" />
		    <result column="pswdTwo" property="pswd" jdbcType="VARCHAR" />
		    <result column="create_time_two" property="createTime" jdbcType="TIMESTAMP" />
		    <result column="last_login_time_two" property="lastLoginTime" jdbcType="TIMESTAMP" />
		    <result column="statusTwo" property="status" jdbcType="BIGINT" />
            <result column="head_pic_url" property="headPicUrl" jdbcType="VARCHAR" />
  		</association>
  </resultMap>
  
  <sql id="Base_Column_List" >
    uu.id, uu.nickname, uu.email, uu.pswd, uu.create_time, uu.last_login_time,uu.status,uu.head_pic_url,uu.personal_intro,uu.age
  </sql>
  
  <sql id="Base_Column_List_Two" >
    uu.id, uu.nickname, uu.email, uu.pswd, uu.create_time, uu.last_login_time,uu.status,uu.head_pic_url,
    uuTwo.id as idTwo, uuTwo.nickname as nicknameTwo, uuTwo.email as emailTwo,
    uuTwo.pswd as pswdTwo,uuTwo.create_time as create_time_two, 
    uuTwo.last_login_time as last_login_time_two,uuTwo.status as statusTwo,uuTwo.head_pic_url
  </sql>
  
  
  <sql id="limit_sql">
  	   <if test="page_sql != null and page_sql != ''">
      	${page_sql}
      </if>
  </sql>
  
  <sql id="where_all">
  	<where>
  	<if test="findContent != null and findContent !='' " >
        and (
        LOWER(nickname) like  LOWER(CONCAT("%",#{findContent,jdbcType=VARCHAR},"%")) or
        LOWER(email) like  LOWER(CONCAT("%",#{findContent,jdbcType=VARCHAR},"%"))
        )
      </if>
      </where>
  </sql>
  <select id="findAll" resultMap="BaseResultMap" >
  	 select 
    <include refid="Base_Column_List" />
    from u_user uu
    <include refid="where_all"/>
    <include refid="limit_sql" />
  </select>
  <select id="findCount" resultMap="BaseResultMap" >
 	 select count(id) from  u_user
  	<include refid="where_all" />
  </select>
  
  
  <!-- 用户权限分配的分页查询 -->
  <select id="findUserAndRole" resultType="com.webMusic.permission.bo.UserRoleAllocationBo">
  	select u.id,u.nickname,u.email,u.create_time,u.last_login_time,u.status ,group_concat(ur.name) roleNames,group_concat(ur.id)roleIds from
	 u_user u
	left join u_user_role uur on uur.uid = u.id
	left join u_role ur on ur.id = uur.rid
	<where>
  	<if test="findContent != null and findContent !='' " >
        and (
        LOWER(u.nickname) like  LOWER(CONCAT("%",#{findContent,jdbcType=VARCHAR},"%")) or
        LOWER(u.email) like  LOWER(CONCAT("%",#{findContent,jdbcType=VARCHAR},"%"))
        )
      </if>
      </where>
	group by u.id 
  </select>
  <select id="selectRoleByUserId" resultType="com.webMusic.permission.bo.URoleBo">
  		<!-- 
		select ur.id,ur.name,ur.type,ifnull(uu.id,0)marker,uu.id userId from u_role ur
		left join u_user_role uur on uur.rid = ur.id
		left join (select id from u_user where id =#{id,jdbcType=BIGINT}) uu on uu.id = uur.uid
		group by ur.id
  		 -->
  		select ur.id,ur.name,ur.type,ifnull(uur.uid,0) marker from u_role ur
		left join(select * from u_user_role where uid=#{id,jdbcType=BIGINT}) uur on uur.rid = ur.id
  </select>
  
  <!-- 登录 -->
  <select id="login" resultMap="BaseResultMap" >
  	 select 
    <include refid="Base_Column_List" />
    from u_user uu
    where email = #{email,jdbcType=VARCHAR} and  pswd = #{pswd,jdbcType=VARCHAR} 
  </select>
  <!-- 根据邮箱|帐号查询 -->
  <select id="findUserByEmail" resultMap="BaseResultMap" >
  	 select 
    <include refid="Base_Column_List" />
    from u_user uu
    where email = #{email,jdbcType=VARCHAR} 
  </select>
  
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Long" >
    select 
    <include refid="Base_Column_List" />
    from u_user uu
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long" >
    delete from u_user
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <insert id="insert" useGeneratedKeys="true" keyProperty="id" parameterType="com.webMusic.common.model.UUser" >
    insert into u_user (id, nickname, email, 
      pswd, create_time, last_login_time,status
      )
    values (#{id,jdbcType=BIGINT}, #{nickname,jdbcType=VARCHAR}, #{email,jdbcType=VARCHAR}, 
      #{pswd,jdbcType=VARCHAR}, #{createTime}, #{lastLoginTime},#{status,jdbcType=BIGINT}
      )
  </insert>
  <insert id="insertSelective" useGeneratedKeys="true" keyProperty="id" parameterType="com.webMusic.common.model.UUser" >
    insert into u_user
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="nickname != null" >
        nickname,
      </if>
      <if test="email != null" >
        email,
      </if>
      <if test="pswd != null" >
        pswd,
      </if>
      <if test="createTime != null" >
        create_time,
      </if>
      <if test="lastLoginTime != null" >
        last_login_time,
      </if>
      <if test="status != null" >
        status,
      </if>
      <if test="headPicUrl != null" >
        head_pic_url,
      </if>
      <if test="personalIntro != null" >
        personal_intro,
      </if>
      <if test="age != null" >
        age,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=BIGINT},
      </if>
      <if test="nickname != null" >
        #{nickname,jdbcType=VARCHAR},
      </if>
      <if test="email != null" >
        #{email,jdbcType=VARCHAR},
      </if>
      <if test="pswd != null" >
        #{pswd,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null" >
        #{createTime},
      </if>
      <if test="lastLoginTime != null" >
        #{lastLoginTime},
      </if>
      <if test="status != null" >
        #{status,jdbcType=BIGINT}
      </if>
      <if test="headPicUrl != null" >
        #{headPicUrl,jdbcType=VARCHAR}
      </if>

      <if test="personalIntro != null" >
        #{personalIntro,jdbcType=VARCHAR}
      </if>
      <if test="age != null" >
        #{age,jdbcType=INTEGER}
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.webMusic.common.model.UUser" >
    update u_user
    <set >
      <if test="nickname != null and nickname != ''" >
        nickname = #{nickname,jdbcType=VARCHAR},
      </if>
      <if test="email != null and email != ''" >
        email = #{email,jdbcType=VARCHAR},
      </if>
      <if test="pswd != null and pswd != ''" >
        pswd = #{pswd,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null" >
        create_time = #{createTime},
      </if>
      <if test="lastLoginTime != null" >
        last_login_time = #{lastLoginTime},
      </if>
      <if test="status != null " >
        status = #{status,jdbcType=BIGINT},
      </if>
      <if test="headPicUrl != null and headPicUrl != ''" >
       head_pic_url =  #{headPicUrl,jdbcType=VARCHAR},
      </if>
      <if test="personalIntro != null" >
        personal_intro =  #{personalIntro,jdbcType=VARCHAR},
      </if>
      <if test="age != null" >
        age =  #{age,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.webMusic.common.model.UUser" >
    update u_user
    set nickname = #{nickname,jdbcType=VARCHAR},
      email = #{email,jdbcType=VARCHAR},
      pswd = #{pswd,jdbcType=VARCHAR},
      create_time = #{createTime},
      last_login_time = #{lastLoginTime},
      status = #{status,jdbcType=BIGINT}
    where id = #{id,jdbcType=BIGINT}
  </update>
</mapper>
